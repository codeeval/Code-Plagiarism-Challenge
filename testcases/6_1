<<< Python Small part of code inside another code

def shellsort(a):
   def new_increment(a):
      c = int(len(a) / 2)
      yield c
      while c != 1:
          if c == 2:
              c = 1
          else:
              c = int(numpy.round(c/2.2))
          yield c
  for increment in new_increment(a):
      for c in xrange(increment, len(a)):
          for d in xrange(c, increment-1, -increment):
              if a[d - increment] < a[d]:
                  break
              a[d],a[d - increment] = a[d - increment],a[d]
  return a

=====

def quickSort(alist):
   quickSortHelper(alist,0,len(alist)-1)

def quickSortHelper(alist,first,last):
   if first<last:

       splitpoint = partition(alist,first,last)

       quickSortHelper(alist,first,splitpoint-1)
       quickSortHelper(alist,splitpoint+1,last)

def shellsort(a):
  def new_increment(a):
      c = int(len(a) / 2)
      yield c
      while c != 1:
          if c == 2:
              c = 1
          else:
              c = int(numpy.round(c/2.2))
          yield c
  for increment in new_increment(a):
      for c in xrange(increment, len(a)):
          for d in xrange(c, increment-1, -increment):
              if a[d - increment] < a[d]:
                  break
              a[d],a[d - increment] = a[d - increment],a[d]
  return a

def partition(alist,first,last):
   pivotvalue = alist[first]

   leftmark = first+1
   rightmark = last

   done = False
   while not done:

       while leftmark <= rightmark and \
               alist[leftmark] <= pivotvalue:
           leftmark = leftmark + 1

       while alist[rightmark] >= pivotvalue and \
               rightmark >= leftmark:
           rightmark = rightmark -1

       if rightmark < leftmark:
           done = True
       else:
           temp = alist[leftmark]
           alist[leftmark] = alist[rightmark]
           alist[rightmark] = temp

   temp = alist[first]
   alist[first] = alist[rightmark]
   alist[rightmark] = temp


   return rightmark

